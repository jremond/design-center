body file control
{
  namespace => "cfdc_db";
}

bundle agent db_install(canon_prefix, class_prefix, db, process_match, start_command, packages, server_packages)
{
  meta:
      # __CANON_PREFIX__ will be supplied by cf-sketch
      "vars[canon_prefix][type]"     string => "NON_EMPTY_STRING";
      "vars[canon_prefix][default]"  string => "__CANON_PREFIX__";

      # __CLASS_PREFIX__ will be supplied by cf-sketch
      "vars[class_prefix][type]"     string => "NON_EMPTY_STRING";
      "vars[class_prefix][default]"  string => "__CLASS_PREFIX__";

      "vars[db][type]"               string => "=mysql|=postgresql|=sqlite";

      # note that CONTEXT parameters are classes, not passed bundle parameters
      "vars[server][type]"           string => "CONTEXT";
      "vars[server][default]"        string => "0";

      # note that CONTEXT parameters are classes, not passed bundle parameters
      "vars[purge][type]"            string => "CONTEXT";
      "vars[purge][default]"         string => "0";

      "vars[process_match][type]"    string => "NON_EMPTY_STRING";

      "vars[start_command][type]"    string => "NON_EMPTY_STRING";

      "vars[packages][type]"         string => "LIST(NON_EMPTY_STRING)";

      "vars[server_packages][type]"  string => "LIST(NON_EMPTY_STRING)";

      # this is exposed via the API
      "returns[db]"    string => "$(db)";
      "returns[type]"  string => "$(type)";
      "returns[mode]"  string => "$(mode)";

  classes:
      "installing_mysql"      expression => strcmp("$(db)", "mysql");
      "installing_postgresql" expression => strcmp("$(db)", "postgresql");
      "installing_sqlite"     expression => strcmp("$(db)", "sqlite");

      "server" expression => "$(class_prefix)server";
      "purge" expression => "$(class_prefix)purge";

  vars:
    server.default:test::
      "all_packages" slist => { "test-packages", "test-server-packages" };
      "type" string => "test-server";

    server.!default:test::
      "all_packages" slist => { @(packages), @(server_packages) };
      "type" string => "server";

    !server.default:test::
      "all_packages" slist => { "test-packages" };
      "type" string => "test-client";

    !server.!default:test::
      "all_packages" slist => { @(packages) };
      "type" string => "client";

    purge.!default:test::
      "mode" string => "purging";

    !purge.!default:test::
      "mode" string => "installing";

    purge.default:test::
      "mode" string => "test-purging";

    !purge.default:test::
      "mode" string => "test-installing";

  packages:

    !purge::
      "$(all_packages)"
      comment => "Install $(db) packages",
      handle => "db_install_packages_add",
      package_policy => "add",
      package_method => default:generic,
      classes => default:if_ok("$(canon_prefix)ensure_database_running"),
      action => default:log_repaired("stdout","$(db) $(type) was installed");

    purge.!(installing_sqlite.redhat)::
      "$(all_packages)"
      comment => "Remove $(db) packages.  SQLite packages should not be purged for Redhat-related distributions because rmp/yum rely on libsqlite.so.0",
      handle => "db_install_packages_remove",
      package_policy => "delete",
      package_method => default:generic,
      action => default:log_repaired("stdout","$(db) $(type) was removed");

  files:

    installing_mysql.server.(redhat|centos|fedora)::

      "/tmp/mysql.sock"
      comment => "Create a temp link to mysql.sock",
      handle => "db_mysql_files_mysql_sock_redhat_centos_fedora",
      link_from => default:ln_s("/var/lib/mysql/mysql.sock");

    installing_mysql.server.(debian|ubuntu)::

      "/tmp/mysql.sock"
      comment => "Create a temp link to mysql.sock",
      handle => "db_mysql_files_mysql_sock_debian_ubuntu",
      link_from => default:ln_s("/var/run/mysqld/mysqld.sock");

  processes:

    server::
      "$(process_match)"
      comment => "Check for $(db) process",
      handle => "db_$(db)_processes_run",
      ifvarclass => "$(canon_prefix)ensure_database_running",
      restart_class => "$(canon_prefix)start_db";

    purge.server::
      "$(process_match)"
      comment => "Teminate $(db) process",
      handle => "db_$(db)_processes_terminate",
      signals => { "term","kill" };

  commands:

      "$(start_command)"
      comment => "Start/Restart command of $(db)",
      handle => "db_$(db)_commands_run",
      ifvarclass => "$(canon_prefix)start_db";

  reports:
    default:test::
      "SIMULATE $(mode) of $(all_packages)";

    default:verbose::
      "DB $(db) $(mode) in $(type) mode; packages $(all_packages)";
      "Class prefix $(class_prefix); my canon prefix $(canon_prefix)";
    default:verbose.purge::
      "Purge mode";
    default:verbose.!purge::
      "Install mode";
    default:verbose.server::
      "Server install mode";
    default:verbose.!server::
      "Client install mode";
}
