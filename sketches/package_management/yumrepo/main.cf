body file control
{
      namespace => "cfdc_yumrepo";
}

bundle agent repo_yum_maintain(class_prefix, createrepo, refresh_interval, repo)
{
      # Creates repomd (xml-rpm-metadata) repository
      # Updates metadata if any packages are added changed or removed

      # In addition to the parameters, takes these lasses:
      # $(class_prefix)debug, $(class_prefix)verbose, $(class_prefix)test

  meta:
      "vars[class_prefix][type]"         string => "NON_EMPTY_STRING";
      "vars[class_prefix][default]"      string => "__CLASS_PREFIX__";

      "vars[debug][type]"                string => "CONTEXT";
      "vars[debug][default]"             string => "!any";

      "vars[test][type]"                 string => "CONTEXT";
      "vars[test][default]"              string => "!any";

      "vars[verbose][type]"              string => "CONTEXT";
      "vars[verbose][default]"           string => "!any";

      "vars[refresh_interval][type]"     string => "DIGITS";
      "vars[refresh_interval][default]"  string => "60";

      "vars[createrepo][type]"           string => "PATH";
      "vars[createrepo][default]"        string => "/usr/bin/createrepo";

      "vars[repo][type]"                 string => "KVARRAY(
_key:NON_EMPTY_STRING
path:PATH:required
perms_m:OCTAL:default=755
perms_o:NON_EMPTY_STRING:default=root
perms_g:NON_EMPTY_STRING:default=root
)";

  classes:
    any::
      "_verbose"  or => { "$(class_prefix)verbose" };
      "_debug"    or => { "$(class_prefix)debug"};
      "_test"     or => { "$(class_prefix)test" };

    default:verbose::
      "_verbose"  or => { "any" };
    default:test::
      "_test"  or => { "any" };
    default:debug::
      "_debug"  or => { "any" };

  vars:
      "bundle" string => "repo_yum_maintain";
      "keys" slist => getindices("$(repo)");

    redhat|centos::
      "deps" slist => { "createrepo" };

  methods:
      "Yum Repository Client Configuration"
      usebundle => cfdc_yumrepo:do($(class_prefix),
                                   $(createrepo),
                                   $(refresh_interval),
                                   $(keys),
                                   "$($(repo)[$(keys)][path])",
                                   "$($(repo)[$(keys)][perm_m])",
                                   "$($(repo)[$(keys)][perm_o])",
                                   "$($(repo)[$(keys)][perm_g])"
                                   ),
      comment => "Configure each yum repository";

  reports:
    _debug::
      "DEBUG $(bundle)  Maintain Yum Repository: array $(repo) KVKEYS $(keys)";
}

bundle agent do(class_prefix, createrepo, refresh_interval, reponame, path, mode, owner, group)
{
  files:
      "$(path)/."
      create => "true",
      perms  => default:mog("$(mode)", "$(owner)", "$(group)"),
      depth_search => default:recurse("inf"),
      action => default:if_elapsed("$(refresh_interval)"),
      comment => "Ensure repository root directory exists with proper permissions";

      # Only check 1 level deep otherwise you will be detecting the change in the metadata itself as well.
      # That in turn will lead to an execution of creatrepo --update each time.
      "$(path)"
      changes      => default:detect_content,
      depth_search => default:recurse("1"),
      classes      => default:if_repaired("$(class_prefix)$(reponame)_needs_metadata_update"),
      action       => default:if_elapsed("$(refresh_interval)"),
      comment      => "If any changes are detected we need to signal to update the metadata";

  classes:
      "_verbose"  or => { "$(class_prefix)verbose", "verbose" };
      "_test"     or => { "$(class_prefix)test",    "test" };
      "_debug"    or => { "$(class_prefix)debug",   "debug" };

      "$(class_prefix)$(reponame)_exists"
      expression => fileexists("$(path)/repodata/repomd.xml"),
      comment    => "Check if a repo exists yet";

  packages:
    redhat|centos::
      "$(deps)"
      package_policy => "add",
      package_method => default:yum_rpm,
      action         => default:if_elapsed("$(refresh_interval)"),
      comment        => "createrepo is needed to create and update
the metadata for a yum repository";

  commands:
      "$(createrepo)"
      args       => "$(path)",
      action     => default:if_elapsed("$(refresh_interval)"),
      contain    => repo_yum_maintain_umask("022"),
      classes    => default:if_repaired("$(class_prefix)$(reponame)_initalized"),
      ifvarclass => not(canonify("$(class_prefix)$(reponame)_exists")),
      comment    => "Create repository if one does not exist";

      # We only want to update the repo once per run. The metadata has not
      # yet been updated. Update it and signal that it has been updated if
      # the command returns zero.
      "$(createrepo)"
      args => "--update $(path)",
      action     => default:if_elapsed("$(refresh_interval)"),
      contain    => repo_yum_maintain_umask("022"),
      classes    => default:if_repaired("$(class_prefix)$(reponame)_metadata_updated"),
      ifvarclass => "$(class_prefix)$(reponame)_needs_metadata_update",
      comment    => "We need to update the metadata since a change was detected";

  reports:
    _verbose::
      "I updated the yum repository $(reponame) at $(path)",
      ifvarclass => "$(class_prefix)$(reponame)_metadata_updated";

      "I initalized the yum repository $(reponame) at $(path)",
      ifvarclass => "$(class_prefix)$(reponame)_initalized";

    _debug::
      "DEBUG $(bundle)  Maintain Yum Repository: $(reponame) at $(path)";
      "DEBUG $(bundle)  createrepo path: $(createrepo)";
      "DEBUG $(bundle)  Owner of $(reponame) should be $(owner)";
      "DEBUG $(bundle)  Group of $(reponame) should be $(group)";
      "DEBUG $(bundle)  Mode of $(reponame) should be $(mode)";
}

# Bodies not in stdlib
body contain repo_yum_maintain_umask(umask)
###################################################
#       | Files               | Directories       #
###################################################
# Umask | Octal   Symbolic    | Octal   Symbolic  #
########+#####################+###################+
# 000   | 666     (rw-rw-rw-) | 777     (rwxrwxrwx)
# 002   | 664     (rw-rw-r--) | 775     (rwxrwxr-x)
# 022   | 644     (rw-r--r--) | 755     (rwxr-xr-x)
# 027   | 640     (rw-r-----) | 750     (rwxr-x---)
# 077   | 600     (rw-------) | 700     (rwx------)
# 277   | 400     (r--------) | 500     (r-x------)
{
      umask => "$(umask)";
}
