body file control
{
  namespace => "cfdc_cron";
}

bundle agent cron(class_prefix, cron_path, tasks)
{
  meta:
      "vars[class_prefix][type]"     string => "NON_EMPTY_STRING";
      "vars[class_prefix][default]"  string => "__CLASS_PREFIX__";

      "vars[nowipe][type]"           string => "CONTEXT";
      "vars[nowipe][default]"        string => "!any";

      "vars[cron_path][type]"        string => "PATH";
      "vars[cron_path][default]"     string => "/usr/bin/crontab";

      "vars[tasks][type]"            string => "KVARRAY(
_key:NON_EMPTY_STRING
runas:NON_EMPTY_STRING
when:NON_EMPTY_STRING
commands:LIST(NON_EMPTY_STRING)
)";

  vars:
      "task_names" slist => getindices("$(tasks)");

  classes:
      "has_crond"    expression => isdir("$(cron_path)");
      "has_crontab"  expression => isexecutable("$(cron_path)");

  methods:
    has_crond::
      "crond"   usebundle => cfdc_cron:d($(class_prefix), $(cron_path), $(tasks), $(task_names));

    has_crontab::
      "crontab" usebundle => cfdc_cron:tab($(class_prefix), $(cron_path), $(tasks), $(task_names));

  reports:
    cfengine.default:debug::

    has_crond.default:debug::
      "We have crond in '$(cron_path)'";
    has_crontab.default:debug::
      "We have crontab in '$(cron_path)'";
    !has_crond.!has_crontab::
      "We have neither cron.d nor crontab, this can't go on!";

}

bundle agent d(class_prefix, cron_path, tasks, task)
{
  vars:
      "tprefix"   string => "$(tasks)[$(task)]";
      "runas"     string => "$($(tprefix)[runas])";
      "when"      string => "$($(tprefix)[when])";
      "commands"  slist  => { "@($(tprefix)[commands])" };

      "lines"     slist  => maplist("#managed by cfengine cron sketch$(const.endl)$(when) $(runas) $(this)", "commands");

  files:
      "$(cron_path)/cron-sketch-$(task)"
      edit_line => default:append_if_no_lines("$(lines)"),
      edit_defaults => default:empty,
      create => "true";

  reports:
    cfengine.default:debug::
      "crond manage: Activating '$(cron_path)/cron-sketch-$(task)': run as $(runas) at times '$(when)', command '$(commands)'";
      "lines to be inserted in '$(cron_path)/cron-sketch-$(task)' = $(lines)";
}

bundle agent tab(class_prefix, cron_path, tasks, task)
{
  classes:
      "only_allow_defined_entries" or => { "!$(class_prefix)nowipe" };

  vars:
    any::
      "tprefix"   string => "$(tasks)[$(task)]";
      "runas"     string => "$($(tprefix)[runas])";
      "when"      string => "$($(tprefix)[when])";
      "commands"  slist  => { "@($(tprefix)[commands])" };

      "marker"    string => "MANAGED_BY_CFENGINE_CRON_SKETCH";
      "lines"     slist  => maplist("$(when) $(marker)=1 $(this)", "commands");

  files:
    only_allow_defined_entries::
      "/tmp/$(class_prefix)$(task).cron"
      edit_line      => default:append_if_no_lines("$(tab.lines[$(task)])"),
      edit_defaults  => default:empty,
      create         => "true",
      classes        => if_ok_define_and_cancel("$(class_prefix)$(task)_if_lines_added", only_allow_defined_entries),
      ifvarclass     => "$(class_prefix)$(task)_prepared";

    !only_allow_defined_entries::
      "/tmp/$(class_prefix)$(task).cron"
      edit_line      => default:append_if_no_lines("$(tab.lines[$(task)])"),
      edit_defaults  => default:std_defs,
      create         => "true",
      classes        => default:if_ok("$(class_prefix)$(task)_if_lines_added"),
      ifvarclass     => "$(class_prefix)$(task)_prepared";

    any::
      "/tmp/$(class_prefix)$(task).cron"
      delete         => default:tidy,
      ifvarclass     => "$(class_prefix)$(task)_if_crontab_changed|($(class_prefix)$(task)_prepared.!$(class_prefix)$(task)_if_lines_added)";

  commands:
      "$(cron_path) -u $(runas) -l > /tmp/$(class_prefix)$(task).cron",
      contain        => default:in_shell,
      classes        => default:if_ok("$(class_prefix)$(task)_prepared");

      "$(cron_path) -u $(runas) /tmp/$(class_prefix)$(task).cron",
      contain        => default:in_shell,
      classes        => default:if_ok("$(class_prefix)$(task)_if_crontab_changed"),
      ifvarclass     => "$(class_prefix)$(task)_if_lines_added";

  reports:
    default:debug::
      "crontab manage: Activating '$(cron_path) $(class_prefix)$(task)' for task $(task) run as $(runas) at times '$(when)', command '$(commands)' @@ $(lines) @@ ";
      "task prefix = $(tprefix)";
      "lines to be inserted in '$(cron_path) $(class_prefix)$(task)' = $(lines)";
    only_allow_defined_entries.default:debug::
      "@@ Crontab may be emptied ! @@";
}

body classes if_ok_define_and_cancel(dcl,cl)
{
    promise_repaired => { "$(dcl)" };
    promise_kept => { "$(dcl)" };
    cancel_repaired => { "$(cl)" };
    cancel_kept => { "$(cl)" };
}
