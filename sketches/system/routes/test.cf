body common control
{
      bundlesequence => { cfsketch_g, cfsketch_run };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "1";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "1";
      "verbose" string => "1";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "main.cf" };
}

bundle agent cfsketch_run
{
  vars:

      # array 'metadata' from definition sketch metadata, activation ___001_System_Routes_ensure
      "___001_System_Routes_ensure_metadata[api][metadata][type]" string => "metadata";
      "___001_System_Routes_ensure_metadata[api][purge_routes][type]" string => "boolean";
      "___001_System_Routes_ensure_metadata[api][runenv][type]" string => "environment";
      "___001_System_Routes_ensure_metadata[api][static_routes][type]" string => "array";
      "___001_System_Routes_ensure_metadata[authors]" slist => { "Jon Henrik Bjornstad <jon.henrik.bjornstad@cfengine.com>" };
      "___001_System_Routes_ensure_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::stdlib" };
      "___001_System_Routes_ensure_metadata[license]" string => "MIT";
      "___001_System_Routes_ensure_metadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/system/routes";
      "___001_System_Routes_ensure_metadata[manifest]" slist => { "README.md", "main.cf" };
      "___001_System_Routes_ensure_metadata[manifest_cf]" slist => { "main.cf" };
      "___001_System_Routes_ensure_metadata[manifest_docs]" slist => { "README.md" };
      "___001_System_Routes_ensure_metadata[manifest_exe]" slist => { "cf_null" };
      "___001_System_Routes_ensure_metadata[manifest_extra]" slist => { "cf_null" };
      "___001_System_Routes_ensure_metadata[name]" string => "System::Routes";
      "___001_System_Routes_ensure_metadata[tags]" slist => { "cfdc", "routes", "iptables" };
      "___001_System_Routes_ensure_metadata[version]" string => "1";

      # array 'static_routes' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/system/routes/params/demo.json, activation ___001_System_Routes_ensure
      "___001_System_Routes_ensure_static_routes[10.20.40.0][gateway]" string => "10.100.160.1";
      "___001_System_Routes_ensure_static_routes[10.20.40.0][netmask]" string => "255.255.255.192";
      "___001_System_Routes_ensure_static_routes[10.20.50.0][device]" string => "eth0";
      "___001_System_Routes_ensure_static_routes[10.20.50.0][gateway]" string => "10.100.160.1";
      "___001_System_Routes_ensure_static_routes[10.20.50.0][netmask]" string => "255.255.255.128";

  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "___001_System_Routes_ensure" usebundle => cfdc_routes:ensure("cf_sketch_testing", "default:cfsketch_run.___001_System_Routes_ensure_metadata", "default:cfsketch_run.___001_System_Routes_ensure_static_routes", "1"), ifvarclass => "linux", useresult => "return____001_System_Routes_ensure";

  reports:
    inform_mode::
      "activation ___001_System_Routes_ensure could not run because it requires classes linux" ifvarclass => "inform_mode.!(linux)";
}
