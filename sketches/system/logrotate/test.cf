body common control
{
      bundlesequence => { cfsketch_g, cfsketch_run };
      inputs => { @(cfsketch_g.inputs) };
}


# environment common bundles

# environment cf_sketch_testing
bundle common cf_sketch_testing
{
  vars:
      "activated" string => "1";
      "env_vars" slist => { "activated", "test", "verbose" };
      "test" string => "1";
      "verbose" string => "1";
  classes:
      "runenv_cf_sketch_testing_activated" expression => "any";
      "runenv_cf_sketch_testing_test" expression => "any";
      "runenv_cf_sketch_testing_verbose" expression => "any";
}


# activation data
bundle common cfsketch_g
{
  vars:
      # Files that need to be loaded for the activated sketches and
      # their dependencies.
      "inputs" slist => { "../../libraries/dclib/library.cf", "../../libraries/copbl/cfengine_stdlib.cf", "main.cf" };
}

bundle agent cfsketch_run
{
  vars:

      # array 'metadata' from definition sketch metadata, activation ___001_System_Logrotate_run
      "___001_System_Logrotate_run_metadata[api][conf_dir][type]" string => "string";
      "___001_System_Logrotate_run_metadata[api][logrotate_descriptions][type]" string => "array";
      "___001_System_Logrotate_run_metadata[api][logrotate_globals][type]" string => "array";
      "___001_System_Logrotate_run_metadata[api][logrotate_purge][type]" string => "boolean";
      "___001_System_Logrotate_run_metadata[api][metadata][type]" string => "metadata";
      "___001_System_Logrotate_run_metadata[api][runenv][type]" string => "environment";
      "___001_System_Logrotate_run_metadata[authors]" slist => { "Jon Henrik Bjornstad <jon.henrik.bjornstad@cfengine.com>" };
      "___001_System_Logrotate_run_metadata[depends]" slist => { "CFEngine::dclib", "CFEngine::stdlib" };
      "___001_System_Logrotate_run_metadata[license]" string => "MIT";
      "___001_System_Logrotate_run_metadata[location]" string => "/home/tzz/.cfagent/inputs/sketches/system/logrotate";
      "___001_System_Logrotate_run_metadata[manifest]" slist => { "README.md", "main.cf" };
      "___001_System_Logrotate_run_metadata[manifest_cf]" slist => { "main.cf" };
      "___001_System_Logrotate_run_metadata[manifest_docs]" slist => { "README.md" };
      "___001_System_Logrotate_run_metadata[manifest_exe]" slist => { "cf_null" };
      "___001_System_Logrotate_run_metadata[manifest_extra]" slist => { "cf_null" };
      "___001_System_Logrotate_run_metadata[name]" string => "System::Logrotate";
      "___001_System_Logrotate_run_metadata[tags]" slist => { "cfdc", "logrotate" };
      "___001_System_Logrotate_run_metadata[version]" string => "1";

      # array 'logrotate_globals' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/system/logrotate/params/demo.json, activation ___001_System_Logrotate_run
      "___001_System_Logrotate_run_logrotate_globals[compress]" string => "compress";
      "___001_System_Logrotate_run_logrotate_globals[create]" string => "";
      "___001_System_Logrotate_run_logrotate_globals[dateext]" string => "dateext";
      "___001_System_Logrotate_run_logrotate_globals[rotate]" string => "4";
      "___001_System_Logrotate_run_logrotate_globals[schedule]" string => "weekly";

      # array 'logrotate_descriptions' from definition parameter definition from /home/tzz/source/design-center/tools/test/../../sketches/system/logrotate/params/demo.json, activation ___001_System_Logrotate_run
      "___001_System_Logrotate_run_logrotate_descriptions[btmp][create]" string => "0600 root utmp";
      "___001_System_Logrotate_run_logrotate_descriptions[btmp][missingok]" string => "missingok";
      "___001_System_Logrotate_run_logrotate_descriptions[btmp][path_description]" string => "/var/log/btmp";
      "___001_System_Logrotate_run_logrotate_descriptions[btmp][rotate]" string => "1";
      "___001_System_Logrotate_run_logrotate_descriptions[btmp][schedule]" string => "monthly";
      "___001_System_Logrotate_run_logrotate_descriptions[dracut][create]" string => "0600 root root";
      "___001_System_Logrotate_run_logrotate_descriptions[dracut][ifempty]" string => "notifempty";
      "___001_System_Logrotate_run_logrotate_descriptions[dracut][missingok]" string => "missingok";
      "___001_System_Logrotate_run_logrotate_descriptions[dracut][path_description]" string => "/var/log/dracut.log";
      "___001_System_Logrotate_run_logrotate_descriptions[dracut][schedule]" string => "yearly";
      "___001_System_Logrotate_run_logrotate_descriptions[dracut][size]" string => "30k";
      "___001_System_Logrotate_run_logrotate_descriptions[httpd][delaycompress]" string => "delaycompress";
      "___001_System_Logrotate_run_logrotate_descriptions[httpd][ifempty]" string => "notifempty";
      "___001_System_Logrotate_run_logrotate_descriptions[httpd][missingok]" string => "missingok";
      "___001_System_Logrotate_run_logrotate_descriptions[httpd][path_description]" string => "/var/log/httpd/*log";
      "___001_System_Logrotate_run_logrotate_descriptions[httpd][postrotate]" string => "/sbin/service httpd reload > /dev/null 2>/dev/null || true";
      "___001_System_Logrotate_run_logrotate_descriptions[httpd][sharedscripts]" string => "sharedscripts";
      "___001_System_Logrotate_run_logrotate_descriptions[subscription-manager][ifempty]" string => "notifempty";
      "___001_System_Logrotate_run_logrotate_descriptions[subscription-manager][missingok]" string => "missingok";
      "___001_System_Logrotate_run_logrotate_descriptions[subscription-manager][path_description]" string => "/var/log/rhsm/*.log";
      "___001_System_Logrotate_run_logrotate_descriptions[subscription-manager][sharedscripts]" string => "sharedscripts";
      "___001_System_Logrotate_run_logrotate_descriptions[syslog][path_description]" string => "/var/log/cron /var/log/maillog /var/log/messages /var/log/secure /var/log/spooler";
      "___001_System_Logrotate_run_logrotate_descriptions[syslog][postrotate]" string => "/bin/kill -HUP `cat /var/run/syslogd.pid 2> /dev/null` 2> /dev/null || true";
      "___001_System_Logrotate_run_logrotate_descriptions[syslog][sharedscripts]" string => "sharedscripts";
      "___001_System_Logrotate_run_logrotate_descriptions[up2date][missingok]" string => "missingok";
      "___001_System_Logrotate_run_logrotate_descriptions[up2date][path_description]" string => "/path/to/file/2/*.log";
      "___001_System_Logrotate_run_logrotate_descriptions[wtmp][create]" string => "0664 root utmp";
      "___001_System_Logrotate_run_logrotate_descriptions[wtmp][minsize]" string => "1M";
      "___001_System_Logrotate_run_logrotate_descriptions[wtmp][path_description]" string => "/var/log/wtmp";
      "___001_System_Logrotate_run_logrotate_descriptions[wtmp][rotate]" string => "1";
      "___001_System_Logrotate_run_logrotate_descriptions[wtmp][schedule]" string => "monthly";
      "___001_System_Logrotate_run_logrotate_descriptions[yum][create]" string => "0600 root root";
      "___001_System_Logrotate_run_logrotate_descriptions[yum][ifempty]" string => "notifempty";
      "___001_System_Logrotate_run_logrotate_descriptions[yum][missingok]" string => "missingok";
      "___001_System_Logrotate_run_logrotate_descriptions[yum][path_description]" string => "/var/log/yum.log";
      "___001_System_Logrotate_run_logrotate_descriptions[yum][schedule]" string => "yearly";
      "___001_System_Logrotate_run_logrotate_descriptions[yum][size]" string => "30k";

  methods:
    any::
      "cfsketch_g" usebundle => "cfsketch_g";
      "cf_sketch_testing" usebundle => "cf_sketch_testing";

    runenv_cf_sketch_testing_activated::
      "___001_System_Logrotate_run" usebundle => cfdc_logrotate:run("cf_sketch_testing", "default:cfsketch_run.___001_System_Logrotate_run_metadata", "/tmp/etc", "default:cfsketch_run.___001_System_Logrotate_run_logrotate_globals", "default:cfsketch_run.___001_System_Logrotate_run_logrotate_descriptions", "1"), ifvarclass => "linux", useresult => "return____001_System_Logrotate_run";

  reports:
    inform_mode::
      "activation ___001_System_Logrotate_run could not run because it requires classes linux" ifvarclass => "inform_mode.!(linux)";
}
